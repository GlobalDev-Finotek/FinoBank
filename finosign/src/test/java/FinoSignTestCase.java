import junit.framework.TestCase;

import globaldev.finotek.com.finosign.FinoSignService;
import globaldev.finotek.com.finosign.SignType;
import globaldev.finotek.com.finosign.inject.FinoSign;
import io.reactivex.functions.Consumer;

/**
 * Created by magyeong-ug on 2017. 11. 8..
 */

public class FinoSignTestCase extends TestCase {


	String masterData1 = "463,252,886580102,463,252,886580103,463,252,886580105,461,254,886580107,458,258,886580108,447,273,886580110,421,304,886580114,400,329,886580117,400,329,886580120,403,325,886580121,411,319,886580123,425,311,886580125,440,305,886580129,444,304,886580132,+" +
			"446,286,886580148,446,286,886580148,446,286,886580150,446,286,886580151,448,286,886580153,457,281,886580155,465,277,886580157,477,271,886580160,480,271,886580163,479,276,886580163,467,291,886580167,457,303,886580170,432,336,886580173,419,350,886580175,419,350,886580178,423,345,886580180,430,337,886580183,448,316,886580186,481,283,886580189,511,260,886580192,535,246,886580195,540,243,886580198,542,242,886580201,542,242,886580201,541,243,886580203,541,243,886580205,540,244,886580206,538,246,886580208,535,249,886580210,532,254,886580211,520,270,886580215,499,297,886580218,495,305,886580221,494,308,886580224,499,306,886580225,504,301,886580228,520,288,886580231,546,265,886580234,563,249,886580237,567,245,886580240,572,241,886580243,572,241,886580245,572,241,886580248,572,241,886580250,572,243,886580251,572,245,886580253,570,252,886580255,567,268,886580259,567,281,886580262,573,283,886580265,578,279,886580268,593,263,886580271,608,238,886580274,615,225,886580277,616,224,886580280,614,226,886580281,613,231,886580283,613,241,886580286,609,307,886580290,609,320,886580293,609,329,886580296,611,330,886580299,609,328,886580300,608,327,886580301,605,324,886580305,+" +
			"374,341,886580338,374,341,886580338,376,339,886580340,383,336,886580342,438,311,886580347,564,271,886580353,600,267,886580356,658,259,886580359,705,253,886580362,727,252,886580365,729,251,886580368,+";

	String masterData2 = "577,415,860579985,577,431,860579986,578,462,860579988,581,515,860579990,584,561,860579991,584,599,860579993,585,627,860579995,585,644,860579996,588,658,860579998,593,667,860580000,603,678,860580001,618,684,860580006,+" +
			"853,445,860580015,812,452,860580020,762,473,860580021,659,535,860580025,602,577,860580029,604,599,860580034,742,584,860580037,998,541,860580042,1154,525,860580045,1262,511,860580049,1317,511,860580053,1340,515,860580056,1343,517,860580061,1344,517,860580062,1344,517,860580068,1344,516,860580069,+" +
			"1244,369,860580084,1244,369,860580086,1241,382,860580088,1238,464,860580092,1242,552,860580096,1245,632,860580100,1245,650,860580104,1243,656,860580108,1236,656,860580116,+" +
			"724,566,860580140,724,566,860580142,725,551,860580144,733,534,860580146,756,507,860580147,787,479,860580149,816,452,860580151,835,437,860580152,850,433,860580154,861,435,860580156,872,461,860580159,873,474,860580161,873,486,860580164,875,489,860580168,882,486,860580169,918,456,860580174,934,460,860580178,943,474,860580182,949,491,860580186,958,490,860580190,983,472,860580194,1014,465,860580199,1038,491,860580203,1048,505,860580209,1095,468,860580214,1123,464,860580218,1168,498,860580225,1191,504,860580230,1211,486,860580235,1217,491,860580240,1213,511,860580245,1232,490,860580250,1310,430,860580254,1352,431,860580258,1351,461,860580262,1301,498,860580266,1267,522,860580271,1266,525,860580275,1285,514,860580276,1337,483,860580281,1350,484,860580285,1370,505,860580289,1413,513,860580294,1424,496,860580299,1426,489,860580303,1448,489,860580307,1489,499,860580312,1513,508,860580316,+" +
			"904,380,860580335,904,380,860580337,912,380,860580340,931,383,860580342,951,383,860580343,960,383,860580345,1071,358,860580353,1090,359,860580355,1123,362,860580359,1130,362,860580363,+";

	String hiddenData1 = "458,246,886579479,459,244,886579480,458,243,886579482,458,244,886579483,456,249,886579485,447,266,886579487,435,283,886579488,412,317,886579492,406,329,886579496,418,321,886579499,441,306,886579502,446,302,886579505,+" +
			"438,293,886579516,438,293,886579518,441,291,886579520,445,286,886579521,452,280,886579523,470,266,886579527,474,267,886579530,472,273,886579533,454,306,886579536,433,339,886579539,416,363,886579542,417,363,886579545,420,358,886579546,429,344,886579548,439,331,886579551,464,301,886579554,504,263,886579557,529,244,886579560,537,238,886579563,538,238,886579566,538,238,886579566,538,239,886579568,537,240,886579570,535,245,886579571,533,249,886579573,526,265,886579577,512,290,886579581,504,305,886579585,503,304,886579588,505,301,886579588,509,296,886579590,514,290,886579593,533,271,886579596,551,255,886579599,566,242,886579603,571,238,886579606,566,245,886579609,562,263,886579612,562,273,886579615,565,283,886579618,580,278,886579621,595,259,886579624,608,232,886579627,612,218,886579630,613,217,886579633,611,223,886579633,611,234,886579636,610,277,886579639,612,325,886579642,615,339,886579645,616,340,886579648,614,338,886579648,612,336,886579650,610,333,886579651,+" +
			"382,344,886579683,382,344,886579683,382,342,886579685,389,338,886579687,399,333,886579688,432,319,886579692,493,294,886579695,554,280,886579699,609,271,886579702,653,265,886579705,662,266,886579708,667,266,886579711,+";

	String hiddenData2 = "606,455,860580662,603,495,860580666,603,520,860580668,603,548,860580669,606,603,860580673,609,631,860580678,609,632,860580682,+" +
			"848,398,860580694,836,404,860580697,814,417,860580699,722,478,860580703,653,557,860580708,791,604,860580714,1080,556,860580719,1239,532,860580723,1397,486,860580727,1420,445,860580732,1365,404,860580737,1221,408,860580740,1152,498,860580745,1108,616,860580749,1102,669,860580753,1098,718,860580757,+" +
			"776,584,860580773,776,584,860580775,783,571,860580777,799,554,860580778,833,521,860580780,863,495,860580782,883,481,860580783,901,474,860580785,915,478,860580787,924,485,860580788,932,496,860580790,943,510,860580794,962,512,860580798,1009,478,860580803,1034,456,860580807,1042,466,860580811,1049,486,860580815,1061,486,860580819,1085,477,860580823,1093,488,860580828,1104,520,860580833,1143,521,860580837,1173,517,860580841,1179,524,860580846,1182,536,860580851,1225,478,860580856,1301,440,860580862,1315,477,860580867,1275,520,860580871,1237,548,860580876,1252,530,860580881,1292,496,860580886,1299,524,860580890,1298,567,860580894,1316,588,860580899,1345,566,860580903,1366,522,860580907,1369,526,860580911,1374,535,860580913,1408,563,860580918,1462,588,860580922,1470,601,860580926,+" +
			"1016,351,860580945,1016,351,860580948,1028,359,860580951,1042,364,860580953,1062,363,860580954,1100,349,860580958,1157,329,860580964,1230,325,860580968,1250,329,860580972,+";

	public void testRegister() throws Exception {

		FinoSign.getInstance()
				.register(masterData1, masterData1, SignType.MASTER)
				.subscribe(new Consumer<String>() {
					@Override
					public void accept(String s) throws Exception {
						assertEquals(true, s != null);
						assertEquals(true, s.length() > 0);
					}
				});

		FinoSign.getInstance()
				.register(hiddenData1, hiddenData1, SignType.HIDDEN)
				.subscribe(new Consumer<String>() {
					@Override
					public void accept(String s) throws Exception {
						assertEquals(true, s != null);
						assertEquals(true, s.length() > 0);
					}
				});
	}

	public void testVerify() throws Exception {

		FinoSign.getInstance()
				.verify(masterData1, hiddenData1)
				.subscribe(new Consumer<Boolean>() {
					@Override
					public void accept(Boolean validation) throws Exception {
						assertEquals(true, validation.booleanValue());
					}
				}, new Consumer<Throwable>() {
					@Override
					public void accept(Throwable throwable) throws Exception {
						System.out.println(throwable.getMessage());
					}
				});
	}

	public void testCrossVerify() throws Exception {

		FinoSign.getInstance()
				.verify(hiddenData2, masterData2)
				.subscribe(new Consumer<Boolean>() {
					@Override
					public void accept(Boolean validation) throws Exception {
						assertEquals(true, validation.booleanValue());
					}
				}, new Consumer<Throwable>() {
					@Override
					public void accept(Throwable throwable) throws Exception {
						System.out.println(throwable.getMessage());
					}
				});
	}

	@Override
	public void tearDown() throws Exception {
		super.tearDown();
	}
}
